properties([
        [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '10', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '']]
]);

def defaultRegistry = "361053095112.dkr.ecr.us-east-1.amazonaws.com"

pipeline {
    options {
        skipDefaultCheckout()
        timestamps ()
    }
    agent any

    parameters {
        string(name: "DOCKER_REGISTRY",
            defaultValue: defaultRegistry)
        string(name: "DOCKER_BUILD_IMAGE",
            defaultValue: "${defaultRegistry}/bmll-compute-env-build-agent:latest")
        string(name: "DOCKER_DEV_REPO",
            defaultValue: "${defaultRegistry}/ed-jobserve-dev")
    }

    environment {
        SLACK_CHANNEL = "ed-team"
        JIRA_REGEX = '.*(CE|PLAT|BMLL|SYS|IQA|ED|CR|LD|NCO)-[0-9]+.*$'
        BLACKDUCK_CREDENTIAL='blackduck-token'
        DETECT_PROJECT_NAME='ED/jobserve'
    }
    stages {
        stage('Store Artifacts'){ //Combined to improve speed
            when {
             anyOf {
                branch 'master'
                expression {
                 return env?.CHANGE_ID
                }
              }
            }
            parallel{
                stage('Upload to Artifactory') {
                    when {
                     anyOf {
                        branch 'master'
                        expression {
                         return env?.CHANGE_ID
                        }
                      }
                    }
                    steps{
                        sh "printenv"
                        sh "cd  ./dist && for f in jobserve*.whl; do mv \$f \${f%.whl}-${BRANCH_NAME}.whl; done"
                        sh "cd  ./dist && for f in jobserve*.tar.gz; do mv \$f \${f%.tar.gz}-${BRANCH_NAME}.tar.gz; done"
                        sh "ls -ltra"
                        echo "Upload artifactory"
                    }
                }
                stage('Pushing New Tags') {
                    when { 
                     branch 'master'
                    }
                    steps {
                       echo "Pushing new tags"
                    }
                }
                stage('Docker development image') {
                    when { 
                     branch 'master'
                
                   }
                    steps {
                       echo "Docker development image"
                    }
                }
            }
        }
    }
}
